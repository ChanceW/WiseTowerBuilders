// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  // Study group relationships
  adminOfGroups StudyGroup[] @relation("GroupAdmin")
  memberOfGroups StudyGroup[] @relation("GroupMembers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudyGroup {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inviteCode  String    @unique // For sharing the group
  admin       User      @relation("GroupAdmin", fields: [adminId], references: [id])
  adminId     String
  members     User[]    @relation("GroupMembers")
  studies     Study[]   // Relation to studies
}

model Study {
  id            String     @id @default(cuid())
  studyGroup    StudyGroup @relation(fields: [studyGroupId], references: [id])
  studyGroupId  String
  isCurrent     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bibleBook     String     // The book of the Bible
  bibleChapter  Int        // The chapter number
  questions     Question[] // Relation to questions

  @@unique([studyGroupId, isCurrent], name: "one_current_study_per_group")
}

model Question {
  id          String   @id @default(cuid())
  passage     String   @db.Text    // The specific Bible passage
  context     String   @db.Text    // Generated context from OpenAI
  discussion  String   @db.Text    // Generated discussion points from OpenAI
  study       Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
