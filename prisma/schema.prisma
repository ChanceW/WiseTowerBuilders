generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String       @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  accounts       Account[]
  answers        Answer[]
  sessions       Session[]
  adminOfGroups  StudyGroup[] @relation("GroupAdmin")
  memberOfGroups StudyGroup[] @relation("GroupMembers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudyGroup {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  inviteCode String   @unique
  adminId    String
  studies    Study[]
  admin      User     @relation("GroupAdmin", fields: [adminId], references: [id])
  members    User[]   @relation("GroupMembers")
}

model Study {
  id           String     @id @default(cuid())
  studyGroupId String
  isCurrent    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bibleBook    String
  bibleChapter Int
  questions    Question[]
  studyGroup   StudyGroup @relation(fields: [studyGroupId], references: [id])

  @@unique([studyGroupId, isCurrent], name: "one_current_study_per_group")
}

model Question {
  id         String   @id @default(cuid())
  context    String
  discussion String
  studyId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  passage    String
  principle  String
  answers    Answer[]
  study      Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  questionId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
}
